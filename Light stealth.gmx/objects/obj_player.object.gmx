<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set up global and local variables

//Set up grid
global.grid = mp_grid_create(0,0,room_width/64,room_height/64,64,64) //Create grid for pathfinding

mp_grid_add_instances(global.grid,obj_wall,false) //Mark cells containg wall as impassible

//Variables
currentmark = noone
pulses = 0

//Music
if !audio_is_playing(ms_main)
    {
    audio_play_sound(ms_main,0,true)
    }
    
//Map
mapx = 0
mapy = 0

maptop = 0
mapbottom = 0
mapleft = 0
mapright = 0

windoww = 0
windowh = 0
scale = 0

with obj_wall
    {
    (other).mapx += x/instance_count;
    (other).mapy += y/instance_count;
    
    if x &gt; (other).mapright
        {
        (other).mapright = x
        }
    if x &lt; (other).mapleft
        {
        (other).mapleft = x
        }
    if y &gt; (other).mapbottom
        {
        (other).mapbottom = y
        }
    if y &lt; (other).maptop
        {
        (other).maptop = y
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Pulse cooldown
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement

//Check for collision where you will be moving

//Temporarily set the image_angle to zero to make walking along walls more consistant
var lastangle = image_angle
image_angle = 0

//check in x

if !instance_place(x + 3*(keyboard_check(ord('D')) - keyboard_check(ord('A'))),y,obj_wall)
    {
    //If you will not be running into a wall, then move
    x += 3*(keyboard_check(ord('D')) - keyboard_check(ord('A')))
    }

//check in y
if !instance_place(x,y + 3*(keyboard_check(ord('S')) - keyboard_check(ord('W'))),obj_wall)
    {
    //If you will not be running into a wall, then move
    y += 3*(keyboard_check(ord('S')) - keyboard_check(ord('W')))
    }

var xdir = sign(keyboard_check(ord('D')) - keyboard_check(ord('A'))) 
var ydir = sign(keyboard_check(ord('S')) - keyboard_check(ord('W')))   
    
if (xdir == 1 &amp;&amp; ydir == 0)
    {
    image_angle = 0
    }
else if (xdir == 1 &amp;&amp; ydir == 1)
    {
    image_angle = 315
    }
else if (xdir == 0 &amp;&amp; ydir == 1)
    {
    image_angle = 270
    }
else if (xdir == -1 &amp;&amp; ydir == 1)
    {
    image_angle = 225
    }
else if (xdir == -1 &amp;&amp; ydir == 0)
    {
    image_angle = 180
    }
else if (xdir == -1 &amp;&amp; ydir == -1)
    {
    image_angle = 135
    }
else if (xdir == 0 &amp;&amp; ydir == -1)
    {
    image_angle = 90
    }
else if (xdir == 1 &amp;&amp; ydir == -1)
    {
    image_angle = 45
    }
else
    {
    image_angle = lastangle
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Camera follows player
view_xview[0] = x-view_wview[0]/2
view_yview[0] = y-view_hview[0]/2
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_end">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>room_goto(room_last)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_enemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>room_goto(room_next(room))
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw a map
if keyboard_check(vk_shift)
    {
    windoww = window_get_width()/2
    windowh = window_get_height()/2
    scale = min(window_get_height()/(mapbottom-maptop+256),window_get_width()/(mapright-mapleft))
    
    with obj_wall
        {
        draw_sprite_ext(spr_wall,0,(other).windoww-20 + (x-(other).mapx)*(other).scale,128*(other).scale + (y-(other).maptop)*(other).scale,image_xscale*(other).scale,image_yscale*(other).scale,0,c_white,0.2)
        }
    with obj_end
        {
        draw_sprite_ext(spr_checkpoint,0,(other).windoww-20 + (x-64-(other).mapx)*(other).scale,128*(other).scale + (y-64-(other).maptop)*(other).scale,image_xscale*(other).scale,image_yscale*(other).scale,0,c_yellow,0.3)
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw enemy indicator
draw_self()

with obj_enemy
    {
    if (distance_to_object(obj_player) &lt; 180) //For every enemy that is close
        {
        var toenemy = point_direction((other).x,(other).y,x,y) //Angle from the player to the enemy
        draw_sprite_ext(spr_indicator,0,(other).x,(other).y,1,1,toenemy,c_white,1) //Draw the indicator
        }
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw wall indicator

///*
var lastangle = image_angle
image_angle = 0

//Check the right
if place_meeting(x+4,y,obj_wall)
    {
    draw_sprite_ext(spr_wallindicator,0,x+33,y,1,1,0,c_white,1)
    }
    
//Check the left
if place_meeting(x-4,y,obj_wall)
    {
    draw_sprite_ext(spr_wallindicator,0,x-33,y,1,1,180,c_white,1)
    }
    
//Check above
if place_meeting(x,y-4,obj_wall)
    {
    draw_sprite_ext(spr_wallindicator,0,x,y-33,1,1,270,c_white,1)
    }
    
//Check below
if place_meeting(x,y+4,obj_wall)
    {
    draw_sprite_ext(spr_wallindicator,0,x,y+33,1,1,90,c_white,1)
    }
    
image_angle = lastangle
//*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// RELEASE THE PULSE
/*
instance_create(x,y,obj_pulse)
*/

if alarm[1] = -1
    {
    alarm[1] = 30
    
    audio_play_sound(pulse_sound,2,false)
    
    if instance_exists(currentmark)
        {
        with currentmark
            {
            instance_destroy()
            }
        }
    
    currentmark = instance_create(x,y,obj_playermarker);
    (currentmark).image_angle = image_angle;
    (currentmark).papa = id;
    
    pulses++;
    
    for(var i = 0;i&lt;360;i++)
        {
        var particle = instance_create(x,y,obj_pellet)
        (particle).direction = i;
        (particle).pulsenum = pulses;
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
